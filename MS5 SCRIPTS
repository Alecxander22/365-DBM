/* Team 11- Team Phoenix- M5 */
--------------------------------------------------------------------------------------------------------
/* Section 1- Transactions */
--------------------------------------------------------------------------------------------------------
/* 1. When a new multi-colorpet is added to the database, also addthe corresponding records to the Color 
table and the owners table. */

begin transaction;

insert into CUSTOMERS
	values('C00000041','Rebecca','January','123 Moser Dr','Phoenix','AZ','85001','USA',480,
	'123-7777','7392810180845555');
insert into PETS
	values('D00000020','C00000041','Bark','Dog','Maltese','40','01/01/2019','M','Y');
insert into COLOR
	values('D00000020','White');
insert into COLOR
	values('D00000020','Brown');
insert into COLOR
	values('D00000020','Black');

Commit;

select * from CUSTOMERS;
select * from PETS;
select * from COLOR;

--AA --ST
--------------------------------------------------------------------------------------------------------
/* 2. When adding a new part-time employee, also add the record to the ‘child’ table to reflect all of the 
employee’s information. */

BEGIN TRANSACTION; 

Insert into STAFF 
  values ('S14000000', 'receptionist', 'Shelley', 'Robinson', '8788 N. Rocker Ln.', 'Anthem', '85086', 
  'AZ', 'US', '6029125678', 11.00, '11-18-19','87678934','12356784','0.06','.05');
Insert into PART_TIMERS 
  values ('S14000000', 'Sabrina', 'Jacobs', 'Margaret', '4807890045');

COMMIT;

Select * from STAFF;
Select * from PART_TIMERS;

--ST -AA
--------------------------------------------------------------------------------------------------------
/* Section 2- Trigger */
--------------------------------------------------------------------------------------------------------
/* 1.(10) TRIGGER: Add a trigger to your reservation table (or equivalent) so that whenever
 a new reservationoccurs (i.e. a new INSERT), automatically create the record for the 
 reservation details table.Time in & out and price can be added after the appointment (nulls allowed). */


Create Trigger AddDaysAbsent /* New trigger table approved by moser*/
	on Absences
		After Insert
As  /* Creating a trigger on Absences to add 1 to the staff table days absent column*/
	Update Staff
		Set DaysAbsent=Daysabsent + 1 
			Where StaffID=(Select StaffID
				From Inserted);

Drop Trigger AddDaysAbsent

		
--AB --TD
--------------------------------------------------------------------------------------------------------
 /* Section 2- Procedure */
--------------------------------------------------------------------------------------------------------
 /* (10) PROCEDURE:  When an employee has a sick day, add a new record to the SickDaysLog 
to record the employee’sID, name, date sick, and the total number of sick days thus far 
including the one addedfor this employee. Hint:You will need to create a SickDaysLogto 
keep track of this data.  The procedure will execute after a new sick day has been recorded 
for the employee. */

Create Table SickDaysLog(
	StaffID  Char(9) Not Null,
	Fname  Varchar(20),
	SickDate   Date,
	TotalSickdays VarChar(3),
	Primary Key (StaffID, SickDate),
	foreign key (StaffID) References Staff(StaffID));

Create Procedure SickDay
	@StaffID Char(9),
	@Date Date as 
	Insert Into SickDaysLog
		Values (@StaffID, 
			(Select FName from Staff where staffID = @staffid), 
			@Date, (Select COUNT(*) From SickDaysLog Where StaffID=@StaffID)+1); /* Look at most recent 
			date for the correct amount of sick days */
			
--ST --AA --AB --TD
--------------------------------------------------------------------------------------------------------
/* Section 3- Indexes */
--------------------------------------------------------------------------------------------------------
/* 1.(2) Identify the attributes (at least 2) that should have secondary indexes 
defined (cluster index is already created) to speed up the query you will define in #3.
Take a snapshot of the tables you will use (select * from each table and show the attributes
and a few rows of data in each one). */

/* A secondary index on FName in STAFF Table and PetName in PETS Table */

--ST
--------------------------------------------------------------------------------------------------------
/* 2.(2) Write the SQL commands to create the secondary indexes for the 2 attributes identified in #1.  
Give reasons for each attribute selected (use comments).  Take a snapshot of the SQL code for both indexes. */

CREATE INDEX FNameX ON STAFF (FName);

CREATE INDEX PetNameX ON PETS (PetName);

--ST
--------------------------------------------------------------------------------------------------------
/* 3.(2) Create an advancedjoinquery and execute (use any multiple tables you wish).  
Show the query, the data results, the time to complete, and the query plan 
(take snapshots of each).  The idea here is to create a query that will tax the 
computer resources –force the DBMS to use its resources. */

Select P.PetID, PetName, Breed, RD.Reservation#, Price, DateofCheckIn, 
S.STAFFID, CONCAT(FName, ' ', LName) "Staff Name", CFName, Color
  From PETS P JOIN RESERVATION_DETAILS RD
    On P.PetID = RD.PetID
	  Join RESERVATIONS R
	   On Rd.Reservation# = R.Reservation#
	  Join Staff S
	   On S.StaffID = R.StaffID
	  Join CUSTOMERS C
	   On C.CustomerID = P.CustomerID
	  Join COLOR Co
	   On CO.PetID = P.PetID
	Order By FName;
	
--TD --AB --AA --ST
--------------------------------------------------------------------------------------------------------
/* 4.(2) Optimize & execute the query in #3.  Show the query, the data results, the time to complete, and 
the query plan (take snapshots of each). */

--(In the pdf file). 
--------------------------------------------------------------------------------------------------------
/* 5.(2) Comment on the differences between the results in parts 3 & 4.  How did you expect the query plans 
to be different?  Did you gain time, or lose time –why?  Based on the query that you executed inpart 3, 
what did you expect to happen and why? */

We expected the time to be quicker with indexes, but what actually happened was the time got slower.
We thought adding an index on first name of 
--------------------------------------------------------------------------------------------------------
/* Section 4- Analytics Dashboard Overview */
--------------------------------------------------------------------------------------------------------
/* 1. Services by Customer's Pet */

Create View ServicesByPet as 
	Select C.CustomerID, C.CFName "Customer First Name",RD.Reservation#,P.PetID,RD.Bath,RD.NumMedGiven,P.PetName
		from Customers C Join Pets P
			on C.CustomerID=P.CustomerID
		Join RESERVATION_DETAILS RD
			on RD.PetID=P.PetID; 
			
--AA
--------------------------------------------------------------------------------------------------------
/* 2. Number of Reservations Per Customer */

Create View  Number_of_Reservations_per_Customer as
Select concat(cfname,' ',clname) as "Customers", Count(r.reservation#) as "Number of Times Stayed"
	From Customers C join Pets p
		On c.CustomerID = p.CustomerID
		Join Reservation_Details RD
		On p.Petid = RD.Petid
		Join Reservations R
		On R.Reservation# = RD.Reservation#
	Group By concat(cfname,' ',clname)

--TD
--------------------------------------------------------------------------------------------------------
/* 3. Revenue by Customer */

Create View RevenueByCustomer
	AS
Select C.CustomerID, Cfname, PetName, R.reservation#, Price
	From Customers C Join pets P
		on C.CustomerID=P.CustomerID
			Join Reservation_Details RD
		on RD.PetID=P.PetID
			Join Reservations R
		on R.Reservation#=RD.Reservation#;
--AB
--------------------------------------------------------------------------------------------------------
/* 4. What Staff Worked With What Pets Whom Belong to What Customer */

CREATE VIEW Staff_Worked_With AS
SELECT S.StaffID, Concat(FName, ' ',LName) "Staff Name", P.PetID, 
PetName, C.CustomerID, Concat(CFName, ' ', CLName) "Customer Name"
 FROM Staff S JOIN RESERVATIONS R
  ON S.StaffID = R.StaffID
  JOIN RESERVATION_DETAILS RD
  ON R.Reservation# = RD.Reservation#
  JOIN PETS P
  ON RD.PetID = P.PetID
  JOIN CUSTOMERS C
  ON P.CustomerID = C.CustomerID;

SELECT *
 FROM Staff_Worked_With
  ORDER BY PETID;
  
--ST

	
	


